// ------------------------ ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå ------------------------
const wordPairs = [
  ["cat","‡πÅ‡∏°‡∏ß"], ["dog","‡∏™‡∏∏‡∏ô‡∏±‡∏Ç"], ["apple","‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•"], ["car","‡∏£‡∏ñ"],
  ["book","‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"], ["house","‡∏ö‡πâ‡∏≤‡∏ô"], ["tree","‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ"], ["sun","‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"],
  ["moon","‡∏û‡∏£‡∏∞‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå"], ["water","‡∏ô‡πâ‡∏≥"], ["fire","‡πÑ‡∏ü"], ["earth","‡πÇ‡∏•‡∏Å"],
  ["friend","‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô"], ["computer","‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå"], ["music","‡∏î‡∏ô‡∏ï‡∏£‡∏µ"],
  ["food","‡∏≠‡∏≤‡∏´‡∏≤‡∏£"], ["drink","‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°"], ["pen","‡∏õ‡∏≤‡∏Å‡∏Å‡∏≤"],
  ["paper","‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©"], ["phone","‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"], ["school","‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"],
  ["teacher","‡∏Ñ‡∏£‡∏π"], ["student","‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"], ["game","‡πÄ‡∏Å‡∏°"], ["love","‡∏£‡∏±‡∏Å"]
];

// ------------------------ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏° ------------------------
let cards = [];
let flippedStack = [];
let score = 0;
let lives = 5;
let highScore = parseInt(localStorage.getItem("highScore") || "0", 10);

let canClick = false;
let currentMode = "easy";
let totalPairs = 0;

// ------------------------ ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á DOM ------------------------
const scoreEl = document.getElementById("score");
const livesEl = document.getElementById("lives");
const highEl  = document.getElementById("highscore");
const boardEl = document.getElementById("game-board");
const controlsEl = document.getElementById("controls");
const overlayEl = document.getElementById("overlay");
const overlayTitleEl = document.getElementById("overlay-title");
const overlayMsgEl = document.getElementById("overlay-msg");
const overlayActionsEl = document.getElementById("overlay-actions");

highEl.textContent = highScore;

// ------------------------ ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏Å‡∏° ------------------------
const MODES = {
  easy:   { lives: 5, pairs: 5,  previewMs: 2000 },
  medium: { lives: 5, pairs: 10, previewMs: 2500 },
  hard:   { lives: 5, pairs: 15, previewMs: 3000 },
};
const MODE_ORDER = ["easy","medium","hard"];
function getNextMode(mode){
  const i = MODE_ORDER.indexOf(mode);
  return (i > -1 && i < MODE_ORDER.length - 1) ? MODE_ORDER[i+1] : null;
}

// ------------------------ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î ------------------------
controlsEl.addEventListener("click", (e) => {
  const btn = e.target.closest("[data-mode]");
  if (!btn) return;
  const mode = btn.dataset.mode;
  startGame(mode);
});

// ------------------------ utils ------------------------
function shuffle(a){
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [a[i], a[j]] = [a[j], a[i]];
  }
}

// ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
function previewAll(duration = 2000){
  canClick = false;
  const cardDivs = Array.from(document.querySelectorAll('.card'));
  cardDivs.forEach((div, i) => {
    const card = cards[i];
    div.textContent = card.word;
    div.classList.add('flipped','preview');
  });
  setTimeout(() => {
    cardDivs.forEach(div => {
      if (!div.classList.contains('matched')){
        div.textContent = '';
        div.classList.remove('flipped','preview');
      }
    });
    canClick = true;
  }, duration);
}

// ------------------------ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° ------------------------
function startGame(mode = "easy"){
  currentMode = mode;
  const cfg = MODES[mode] || MODES.easy;
  const { lives: lv, pairs, previewMs } = cfg;

  score = 0;
  lives = lv;
  totalPairs = pairs;
  scoreEl.textContent = score;
  livesEl.textContent = "‚ù§Ô∏è " + lives;

  // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
  const wp = wordPairs.slice();
  shuffle(wp);
  const selected = wp.slice(0, pairs);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î 2 ‡∏†‡∏≤‡∏©‡∏≤
  cards = [];
  selected.forEach(([eng, th]) => {
    cards.push({ word: eng, pair: th, matched: false });
    cards.push({ word: th, pair: eng, matched: false });
  });

  shuffle(cards);

  // ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
  boardEl.innerHTML = "";
  cards.forEach((card, index) => {
    const div = document.createElement("div");
    div.className = "card";
    div.dataset.index = index;
    div.addEventListener("click", () => flipCard(div, index));
    boardEl.appendChild(div);
  });

  // ‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
  previewAll(previewMs);
}

// ------------------------ ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏û‡πà ------------------------
function flipCard(div, index) {
  if (!canClick) return;
  const card = cards[index];
  if (card.matched || div.classList.contains("flipped") || flippedStack.length === 2) return;

  div.textContent = card.word;
  div.classList.add("flipped");
  flippedStack.push({ card, div });

  if (flippedStack.length === 2) {
    setTimeout(checkMatch, 800);
  }
}

function checkMatch() {
  const [first, second] = flippedStack;
  if (first.card.pair === second.card.word) {
    first.card.matched = true;
    second.card.matched = true;
    first.div.classList.add("matched");
    second.div.classList.add("matched");
    score++;
    scoreEl.textContent = score;

    // ‡∏ä‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏π‡πà
    if (score >= totalPairs) {
      canClick = false;
      setTimeout(() => endGame(true), 300);
      flippedStack = [];
      return;
    }
  } else {
    first.div.textContent = "";
    second.div.textContent = "";
    first.div.classList.remove("flipped");
    second.div.classList.remove("flipped");
    lives--;
    livesEl.textContent = "‚ù§Ô∏è " + lives;
    if (lives <= 0) { endGame(false); flippedStack = []; return; }
  }
  flippedStack = [];
}

// ------------------------ ‡∏à‡∏ö‡πÄ‡∏Å‡∏° + ‡πÄ‡∏°‡∏ô‡∏π ------------------------
function showOverlay({ win, score }){
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï High Score
  if (score > highScore) {
    highScore = score;
    localStorage.setItem("highScore", String(highScore));
    highEl.textContent = highScore;
  }

  overlayTitleEl.textContent = win ? "üéâ ‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß!" : "‡∏à‡∏ö‡πÄ‡∏Å‡∏°";
  overlayMsgEl.textContent = `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ${score} | ‡πÇ‡∏´‡∏°‡∏î: ${currentMode}`;
  overlayActionsEl.innerHTML = "";

  // ‡∏õ‡∏∏‡πà‡∏° ‚Äú‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‚Äù (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î = game.html)
  const btnHome = document.createElement("button");
  btnHome.className = "btn-ghost";
  btnHome.textContent = "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å";
  btnHome.onclick = () => { window.location.href = "game.html"; };
  overlayActionsEl.appendChild(btnHome);

  if (win){
    const next = getNextMode(currentMode);
    if (next){
      const btnNext = document.createElement("button");
      btnNext.className = "btn-primary";
      btnNext.textContent = "‡πÑ‡∏õ‡∏ï‡πà‡∏≠";
      btnNext.onclick = () => {
        overlayEl.style.display = "none";
        startGame(next);
      };
      overlayActionsEl.appendChild(btnNext);
    }else{
      const btnRetry = document.createElement("button");
      btnRetry.className = "btn-primary";
      btnRetry.textContent = "‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏¥‡∏°)";
      btnRetry.onclick = () => {
        overlayEl.style.display = "none";
        startGame(currentMode);
      };
      overlayActionsEl.appendChild(btnRetry);
    }
  }else{
    const btnRestart = document.createElement("button");
    btnRestart.className = "btn-primary";
    btnRestart.textContent = "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà";
    btnRestart.onclick = () => {
      overlayEl.style.display = "none";
      startGame(currentMode);
    };
    overlayActionsEl.appendChild(btnRestart);
  }

  overlayEl.style.display = "flex";
  canClick = false;
}

function endGame(win = false) {
  showOverlay({ win, score });
}
